<?php

/**
 * @file
 * Logging facilities for Petitions.
 */

/**
 * Logs a system event.
 *
 * @param string $name
 *   The
 *   @link http://graphite.readthedocs.org/)-compatible Graphite @endlink
 *   -compatible name of the event you want to log--i.e., a path delimited by
 *   dots (.). (See
 *   @link http://graphite.readthedocs.org/en/latest/feeding-carbon.html#step-1-plan-a-naming-hierarchy Getting Your Data Into Graphite: Step 1 @endlink
 *   .)
 * @param string $type
 *   (optional) The type of metric to log--one of the following values
 *   corresponding to the
 *   @link https://github.com/etsy/statsd/blob/master/docs/metric_types.md StatsD Metric Types @endlink
 *   :
 *   - count: The corresponding value is a number by which to increment (or
 *     decrement, if negative) a simple counter.
 *   - gauge: The corresponding value is a single datum, which remains constant
 *     until explicitly changed.
 *   - set: The corresponding value is a value to add to a set of unique values.
 *   - time: The corresponding value is a duration in milliseconds.
 * @param int|null $value
 *   (optional) The numeric value you wish to log. Defaults to NULL.
 *
 * @see hook_petitionslog_event()
 */
function petitionslog_event($name, $type = 'count', $value = NULL) {
  // Assert valid event type.
  $valid_types = array('count', 'gauge', 'set', 'time');
  if (!in_array($type, $valid_types)) {
    watchdog('petitionslog', 'Invalid event type: %type.', array(
      '%type' => $type,
    ), WATCHDOG_WARNING);
    return;
  }

  // Assert valid event value.
  if (!is_null($value) && !is_int($value)) {
    watchdog('petitionslog', 'Invalid event value: %value.', array(
      '%value' => $value,
    ), WATCHDOG_WARNING);
    return;
  }

  // Conditionally log events to watchdog for debugging purposes.
  // Note: This variable has no UI.
  if (variable_get('petitionslog_debug', FALSE)) {
    watchdog('petitionslog', 'Petitions Log Event: @name | @type | @value', array(
      '@name' => $name,
      '@type' => $type,
      '@value' => is_null($value) ? 'NULL' : $value,
    ), WATCHDOG_DEBUG);
  }

  module_invoke_all('petitionslog_event', $name, $type, $value);
}

/**
 * Starts a reusable timer.
 *
 * This function is a mere wrapper for symmetry with
 * petitionslog_reusable_timer_read_and_destroy(), which performs the important
 * work of preventing timers from accumulating through reuse.
 *
 * @param string $name
 *   The name of the timer.
 *
 * @see petitionslog_reusable_timer_read_and_destroy()
 */
function petitionslog_reusable_timer_start($name) {
  timer_start($name);
}

/**
 * Reads and destroys a reusable timer.
 *
 * Drupal provides no facility to destroying timers, so two uses of the same
 * timer name inside the same PHP process will accumulate, e.g., if a timer by
 * the same name is used inside a loop with five iterations and each iteration
 * takes one second, the first iteration will accurately register as having
 * taken one second, but the second will register as having taken two, the third
 * as three, etc.
 *
 * After calling this function, a timer by the same name can be safely started
 * using petitionslog_reusable_timer_start().
 *
 * @param string $name
 *   The name of the timer.
 *
 * @return int
 *   The current timer value in milliseconds.
 *
 * @see petitionslog_reusable_timer_start()
 */
function petitionslog_reusable_timer_read_and_destroy($name) {
  $elapsed = (int) timer_read($name);

  // Delete the timer variable to prevent accumulation.
  unset($GLOBALS['timers'][$name]['start']);

  return $elapsed;
}

/**
 * Filters a given event metric name.
 *
 * @param string $name
 *   The metric name to filter.
 *
 * @return string
 *   The filtered metric name.
 */
function petitionslog_filter_metric($name) {
  // Graphite (http://graphite.readthedocs.org/) uses dots to separate event
  // name components. Replace them with underscores.
  $filtered_name = str_replace('.', '_', $name);
  return $filtered_name;
}

/**
 * Logs a database query to watchdog.
 *
 * @param string $type
 *   The category to which this message belongs. Can be any string, but the
 *   general practice is to use the name of the module calling
 *   petitionslog_log_query().
 * @param QueryAlterableInterface $query
 *   An Query object describing the composite parts of a SQL query.
 */
function petitionslog_log_query($type, QueryAlterableInterface $query) {
  // Get the SQL for the query. This logic is adapted from devel's dpq(). The
  // chief difference is that the below doesn't invoke the query's preExecute()
  // method, which can cause errors in this context. Regardless, avoiding the
  // dependency makes it possible, if necessary, to use this feature in prod
  // without enabling devel there, and that's good thing.
  $sql = (string) $query;
  $quoted = array();
  $connection = Database::getConnection();
  foreach ((array) $query->arguments() as $key => $val) {
    $quoted[$key] = $connection->quote($val);
  }
  $sql = strtr($sql, $quoted);

  // Prefix tables so the string is directly copy/paste-able into an SQL tool.
  $sql = $connection->prefixTables($sql);

  // Run EXPLAIN. Wrap in a try..catch() in case of a database that doesn't
  // support the syntax.
  try {
    $result = db_query("EXPLAIN {$sql}");
    $explain = array();
    while ($row = $result->fetchAssoc()) {
      $explain[] = $row;
    }
  }
  catch (Exception $e) {
    $explain = t('Not available.');
  }

  watchdog($type, 'SQL: !sql EXPLAIN: !explain Query object: !query', array(
    '!sql' => petitionslog_format_for_watchdog($sql),
    '!explain' => petitionslog_format_for_watchdog($explain),
    '!query' => petitionslog_format_for_watchdog($query),
  ));
}

/**
 * Formats data for logging via watchdog.
 *
 * This function tries to determine where data will be logged and formats it
 * accordingly--collapsing data structures to a single line for log files (which
 * truncate multiline output) but expanding them for easier reading with
 * (multiline-capable) dblog.
 *
 * @param mixed $data
 *   An arbitrary array or object to be formatted readably for logging.
 *
 * @return string
 *   The data formatted to send to watchdog.
 *
 * @see watchdog()
 */
function petitionslog_format_for_watchdog($data) {
  // Use pretty printing if dblog is enabled.
  if (module_exists('dblog')) {
    if (is_string($data)) {
      return "<blockquote><pre>{$data}</pre></blockquote>";
    }
    // JSON_PRETTY_PRINT is only available since PHP 5.4.0.
    elseif (defined('JSON_PRETTY_PRINT')) {
      return '<blockquote><pre>' . json_encode($data, JSON_PRETTY_PRINT) . '</pre></blockquote>';
    }
    else {
      return '<blockquote><pre>' . print_r($data, TRUE) . '</pre></blockquote>';
    }
  }
  // Otherwise, use (compressed) JSON to get it all on a single line.
  else {
    return json_encode($data);
  }
}
