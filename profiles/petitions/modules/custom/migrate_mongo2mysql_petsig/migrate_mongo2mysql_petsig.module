<?php
/**
 * @file
 * Declares all the hooks for this module.
 */

/**
 * Implements hook_menu().
 */
function migrate_mongo2mysql_petsig_menu() {
  $items['admin/reports/mongo-mysql-petition/compare'] = array(
    'title' => 'Compare a Mongo Petition to a MySQL Petition',
    'page callback' => '_migrate_mongo2mysql_petsig_page',
    'page arguments' => array(4),
    'access arguments' => array('view mongo mysql petition comparison'),
    'file' => 'migrate_mongo2mysql_petsig_compare.inc',
  );

  $items['admin/reports/mongo-mysql-signature/compare'] = array(
    'title' => 'Compare a Mongo Signature to a MySQL Signature',
    'page callback' => '_migrate_mongo2mysql_petsig_signature_page',
    'page arguments' => array(4),
    'access arguments' => array('view mongo mysql petition comparison'),
    'file' => 'migrate_mongo2mysql_petsig_compare.inc',
  );

  // Admin - Petition Tool Settings.
  $items['admin/config/system/mongo-mysql'] = array(
    'title' => 'Petition Migration Settings',
    'description' => 'Manage mongo2mysql migration settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_migrate_mongo2mysql_settings'),
    'access arguments' => array('administer petition settings'),
    'weight' => -10,
    'file' => 'migrate_mongo2mysql_petsig.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function migrate_mongo2mysql_petsig_permission() {
  return array(
    'view mongo mysql petition comparison' => array(
      'title' => t('View Mongo MySql Petition Comparison'),
      'description' => t('Allows user to see admin/mongo-mysql-petition/compare'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function migrate_mongo2mysql_petsig_theme($existing, $type, $theme, $path) {
  $a_themes = array(
    'migrate_mongo2mysql_petsig_compare_table' => array(
      'variables' => array(),
      'template' => 'migrate_mongo2mysql_petsig_compare',
    ),

    'migrate_mongo2mysql_petsig_sig_compare' => array(
      'variables' => array(),
      'template' => 'migrate_mongo2mysql_petsig_sig_compare',
    ),

    'migrate_mongo2mysql_petsig_sig_list' => array(
      'variables' => array(),
      'template' => 'migrate_mongo2mysql_petsig_sig_list',
    ),

    'migrate_mongo2mysql_petsig_sig_list_mysql' => array(
      'variables' => array(),
      'template' => 'migrate_mongo2mysql_petsig_sig_list_mysql',
    ),

  );
  return $a_themes;
}

/**
 * Replace 4-byte utf8 chars with an undefined symbol.
 *
 * @param string $string
 *   A string.
 *
 * @return string
 *   the string without 4 byte utf8 chars.
 */
function replace4byte($string) {
  return preg_replace('%(?:
      \xF0[\x90-\xBF][\x80-\xBF]{2}      # planes 1-3
    | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
    | \xF4[\x80-\x8F][\x80-\xBF]{2}      # plane 16
    )%xs', "ï¿½", $string);
}

/**
 * Sanitizes database input.
 *
 * Removes characters that break XML validation and replaces non-English
 * characters with x's.
 *
 * @param string $string
 *   The raw input string.
 *
 * @return string
 *   The XML-safe output string.
 */
function migrate_mongo2mysql_sanitize_output($string) {
  // Make the string XML-safe by removing unacceptable Unicode characters.
  // @see http://stackoverflow.com/questions/12229572/php-generated-xml-shows-invalid-char-value-27-message
  $string = preg_replace('/[^\x{0009}\x{000a}\x{000d}\x{0020}-\x{D7FF}\x{E000}-\x{FFFD}]+/u', '', $string);

  // Replace non-English characters with x's.
  // @see http://stackoverflow.com/questions/3654879/remove-non-english-characters-php
  $string = preg_replace('/[^\00-\255]+/u', 'x', $string);

  // Remove potential XSS attempts.
  $string = filter_xss($string);

  return $string;
}
